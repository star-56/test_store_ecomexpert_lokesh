{% schema %}
{
  "name": "Gift Guide Products",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Tisso vison in the wild"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "products_limit",
      "label": "Number of Products",
      "min": 4,
      "max": 12,
      "step": 2,
      "default": 6
    }
  ],
  "blocks": [
    {
      "type": "product_item",
      "name": "Product Item",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        },
        {
          "type": "checkbox",
          "id": "show_hotspot",
          "label": "Show Hotspot",
          "default": true
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Gift Guide Products"
    }
  ]
}
{% endschema %}

<section class="gift-guide-products">
  <div class="container">
    <h2 class="section-title">{{ section.settings.section_title }}</h2>
    
    <div class="products-grid">
      {% if section.blocks.size > 0 %}
        {% for block in section.blocks %}
          {% if block.type == 'product_item' and block.settings.product %}
            {% assign product = block.settings.product %}
            <div class="product-card" {{ block.shopify_attributes }}>
              <div class="product-image-wrapper">
                {% if product.featured_image %}
                  {{ product.featured_image | image_url: width: 600 | image_tag: class: 'product-image', loading: 'lazy' }}
                {% endif %}
                {% if block.settings.show_hotspot %}
                  <button 
                    class="product-hotspot-overlay" 
                    data-product-id="{{ product.id }}"
                    data-product-handle="{{ product.handle }}"
                  >
                    <svg class="hotspot-icon" width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <g filter="url(#filter0_d_3_2760_{{ forloop.index }}">
                        <circle cx="15" cy="12" r="11" fill="#F8F8F8" fill-opacity="0.9"/>
                        <path d="M15.3457 8.04175V16.5033" stroke="black" stroke-width="1.5" stroke-linecap="square" stroke-linejoin="round"/>
                        <path d="M11.1152 12.2725H19.5768" stroke="black" stroke-width="1.5" stroke-linecap="square" stroke-linejoin="round"/>
                      </g>
                      <defs>
                        <filter id="filter0_d_3_2760_{{ forloop.index }}" x="0" y="0" width="30" height="30" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                          <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                          <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
                          <feOffset dy="3"/>
                          <feGaussianBlur stdDeviation="2"/>
                          <feComposite in2="hardAlpha" operator="out"/>
                          <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0"/>
                          <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_3_2760"/>
                          <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_3_2760" result="shape"/>
                        </filter>
                      </defs>
                    </svg>
                  </button>
                {% endif %}
              </div>
            </div>
          {% endif %}
        {% endfor %}
      {% elsif section.settings.collection %}
        {% assign products = section.settings.collection.products | limit: section.settings.products_limit %}
        {% for product in products %}
          <div class="product-card">
            <div class="product-image-wrapper">
              {% if product.featured_image %}
                {{ product.featured_image | image_url: width: 600 | image_tag: class: 'product-image', loading: 'lazy' }}
              {% endif %}
              <button 
                class="product-hotspot-overlay" 
                data-product-id="{{ product.id }}"
                data-product-handle="{{ product.handle }}"
              >
                <svg class="hotspot-icon" width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <g filter="url(#filter0_d_3_2760_{{ forloop.index }}">
                    <circle cx="15" cy="12" r="11" fill="#F8F8F8" fill-opacity="0.9"/>
                    <path d="M15.3457 8.04175V16.5033" stroke="black" stroke-width="1.5" stroke-linecap="square" stroke-linejoin="round"/>
                    <path d="M11.1152 12.2725H19.5768" stroke="black" stroke-width="1.5" stroke-linecap="square" stroke-linejoin="round"/>
                  </g>
                  <defs>
                    <filter id="filter0_d_3_2760_{{ forloop.index }}" x="0" y="0" width="30" height="30" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                      <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
                      <feOffset dy="3"/>
                      <feGaussianBlur stdDeviation="2"/>
                      <feComposite in2="hardAlpha" operator="out"/>
                      <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0"/>
                      <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_3_2760"/>
                      <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_3_2760" result="shape"/>
                    </filter>
                  </defs>
                </svg>
              </button>
            </div>
          </div>
        {% endfor %}
      {% endif %}
    </div>
  </div>
</section>

<!-- Product Modal using the new product-card component -->
<div id="productModal" class="product-modal">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <button class="modal-close">&times;</button>
    <div id="productCardContainer" class="product-card-container">
      <!-- Dynamic product card will be rendered here -->
      <!-- Product Modal -->
{% render 'product-card' %}

    </div>
  </div>
</div>